heat_template_version: 2013-05-23

description: >
  TOSCA example for specifying a Mesos Cluster

parameters:
  cms_stageoutsite_fallback:
    type: string
    default: DUMMY
  iam_token:
    type: string
  cms_local_site:
    type: string
    default: T2_ES_IFCA
  cms_stageoutprefix_fallback:
    type: string
    default: DUMMY
  server_image:
    type: string
    description: Image used to boot a server
    default: ubuntu16-software-config-ifca
  cms_stageoutserver:
    type: string
  cms_stageoutserver_fallback:
    type: string
    default: DUMMY
  cms_input_path:
    type: string
    default: DUMMY
  onedatacache:
    type: string
    default: 160.44.194.19
  onedatatoken:
    type: string
    default: DUMMYTOKEN
  cms_stageoutsite:
    type: string
    default: T2_ES_IFCA
  cms_input_protocol:
    type: string
    default: xrootd
  monitordb_ip:
    type: string
    default: 193.205.222.247:8080
  iam_client_secret:
    type: string
  iam_client_id:
    type: string
  elasticsearch_secret:
    type: string
  onedata_cache:
    type: string
    default: "DUMMY"
  onedata_token:
    type: string
    default: "DUMMY"
  cms_stageoutprefix:
    type: string
    default: srm://srmfe02.ifca.es:8444/srm/managerv2?SFN=/cmsdisk/
  cms_squid_image:
    type: string
    default: "spiga/frontiersquidv1"
  cms_wn_image:
    type: string
    default: "spiga/cmswn"
  cms_proxycache_image:
    type: string
    default: "spiga/ttscache"
  cms_input_path:
    type: string
    default: "DUMMY"
  cms_input_protocol:
    type: string
    default: "xrootd"
  network:
    type: string
    description: Network ID for the servers
  subnetCMS:
    type: string
    description: Sub Network ID for the servers
  ssh_key_name:
    type: string
    description: Name of keypair to assign to servers
  master_flavor:
    type: string
    description: flavor to use when booting the master
    default: cm4.xlarge
  slave_flavor:
    type: string
    description: flavor to use when booting the slave
    default: cm4.large
  loadbalancer_flavor:
    type: string
    description: flavor to use when booting the load balancer
    default: cm4.large
  number_of_masters:
    type: number
    description: how many mesos masters to spawn initially
    default: 1
  number_of_slaves:
    type: number
    description: how many mesos slaves to spawn initially
    default: 2
  marathon_username:
    type: string
    description: username to access Marathon endpoint
  marathon_password:
    type: string
    description: password to access Marathon endpoint
  monitor_ip:
    type: string
    default: "193.205.222.247:8080"
resources:
  ######################################################################
  #
  # security groups.  we need to permit network traffic of various
  # sorts.
  #

  secgroup_base:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          remote_mode: remote_group_id

  secgroup_mesos:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          port_range_min: 5050
          port_range_max: 5050
        - protocol: tcp
          port_range_min: 8443
          port_range_max: 8443
        - protocol: tcp
          port_range_min: 4443
          port_range_max: 4443
        - protocol: tcp
          port_range_min: 8080
          port_range_max: 8080

  # Required by  <slave>/monitoring/statisics.json resource
  secgroup_slaves:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          port_range_min: 5051
          port_range_max: 5051

  secgroup_all_open:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp


  vip_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: network}
      security_groups:
        - get_resource: secgroup_all_open
      replacement_policy: AUTO


  ######################################################################
  #
  # Load Balancers SoftwareConfig.
  #
  loadbalancer_setup_deployment:
    type: OS::Heat::SoftwareDeployments
    properties:
      config: {get_resource: ansible_setup_config}
      servers: {get_attr: [loadbalancers, attributes, loadbalancer_id]}
      input_values: 
        role_list: "consul,keepalived,marathon-lb"

  loadbalancer_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: consul_servers
          type: CommaDelimitedList
        - name: keepalived_virtual_ip
      config: |
              ---
              - hosts: localhost
                vars:
                  docker_bridge_ip: "172.0.17.1"
                connection: local
                pre_tasks:
                  - name: Fix /etc/hosts
                    lineinfile: dest=/etc/hosts regexp='^127\.0\.1\.1' line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                  - name: Update /etc/hosts
                    lineinfile:  dest=/etc/hosts  line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                roles:
                  - { role: indigo-dc.consul, consul_mode: "agent" }
                  - { role: indigo-dc.marathon-lb }
                  - { role: indigo-dc.keepalived }
  loadbalancer_deployment:
    type: OS::Heat::SoftwareDeployments
    depends_on:
      - loadbalancer_setup_deployment
      - master_deployment
    properties:
      config: {get_resource: loadbalancer_config}
      servers: {get_attr: [loadbalancers, attributes, loadbalancer_id]}
      input_values:
        consul_servers: {get_attr: [mesos_masters, mesos_server_ip]}
        load_balancers_list: {get_attr: [loadbalancers, loadbalancer_ip]}
        keepalived_virtual_ip: {get_attr: [vip_port, fixed_ips, 0, ip_address]}
        marathon_lb_auth_creds: 
           list_join: 
             - ':'
             - - {get_param: marathon_username }
               - {get_param: marathon_password }
  

  loadbalancers:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: https://raw.githubusercontent.com/indigo-dc/mesos-cluster/master/deploy/openstack-heat/loadbalancer.yaml
        properties:
          server_name: lb%index%
          ssh_key_name: {get_param: ssh_key_name}
          server_image: {get_param: server_image}
          server_flavor: {get_param: loadbalancer_flavor}
          network: {get_param: network}
          virtual_ip: {get_attr: [vip_port, fixed_ips, 0, ip_address]}
          security_groups:
              - {get_resource: secgroup_base}
              - {get_resource: secgroup_all_open}


  #########
  # Common config
  ansible_setup_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: role_list
        type: CommaDelimitedList 
      config: { get_file: 'https://raw.githubusercontent.com/indigo-dc/mesos-cluster/master/deploy/openstack-heat/setup.sh' }

   
  ######################################################################
  #
  # Master SoftwareConfig.
  #
  master_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: mesos_masters_list
          type: CommaDelimitedList
        - name: consul_servers
        - name: zookeeper_host_list
        - name: zookeeper_peers
        - name: marathon_username
        - name: marathon_password
        - name: enable_chronos
      config: |
              ---
              - hosts: localhost
                vars:
                  docker_bridge_ip: "172.0.17.1"
                connection: local
                pre_tasks:
                  - name: Fix /etc/hosts
                    lineinfile: dest=/etc/hosts regexp='^127\.0\.1\.1' line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                  - name: Update /etc/hosts
                    lineinfile:  dest=/etc/hosts  line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                roles:
                  - { role: indigo-dc.consul, consul_mode: "server" }
                  - { role: indigo-dc.zookeeper }
                  - { role: indigo-dc.mesos, mesos_install_mode: "master" }
                  - { role: indigo-dc.marathon }
  ######################################################################
  #
  # Master SoftwareDeployment.
  #
  master_setup_deployment:
    type: OS::Heat::SoftwareDeployments
    properties:
      config: {get_resource: ansible_setup_config}
      servers: {get_attr: [mesos_masters, attributes, mesos_server_id]}  
      input_values:
        role_list: "consul,zookeeper,mesos,marathon,cms_config"

  master_deployment:
    type: OS::Heat::SoftwareDeployments
    depends_on:
      - master_setup_deployment
    properties:
      config: {get_resource: master_config}
      servers: {get_attr: [mesos_masters, attributes, mesos_server_id]}
      input_values:
        mesos_masters_list: {get_attr: [mesos_masters, mesos_server_ip]}
        enable_chronos: false
        consul_servers: "{{mesos_masters_list}}"
        zookeeper_host_list: "{{mesos_masters_list}}"
        zookeeper_peers: "{{mesos_masters_list}}"
        marathon_username: {get_param: marathon_username}
        marathon_password: {get_param: marathon_password}

  mesos_masters:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: number_of_masters}
      resource_def:
         type: https://raw.githubusercontent.com/indigo-dc/mesos-cluster/master/deploy/openstack-heat/mesosnode.yaml
         properties: 
            server_name: mesos-m%index%
            ssh_key_name: {get_param: ssh_key_name}
            server_image: {get_param: server_image}
            server_flavor: {get_param: master_flavor}
            network: {get_param: network}
            security_groups:
              - {get_resource: secgroup_base}
              - {get_resource: secgroup_mesos}


  ######################################################################
  #
  # Mesos slaves. This is a resource group that will initially
  # create <number_of_slaves> slaves, and needs to be manually scaled.
  #
  slave_setup_deployment:
    type: OS::Heat::SoftwareDeployments
    properties:
      config: {get_resource: ansible_setup_config}
      servers: {get_attr: [mesos_slaves, attributes, mesos_server_id]}
      input_values:
        role_list: "consul,mesos,cms_config"

  slave_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: zookeeper_peers
          type: CommaDelimitedList
        - name: consul_servers
          type: CommaDelimitedList
      config: |
              ---
              - hosts: localhost
                vars:
                  docker_bridge_ip: "172.0.17.1"
                connection: local
                pre_tasks:
                  - name: Fix /etc/hosts
                    lineinfile: dest=/etc/hosts regexp='^127\.0\.1\.1' line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                  - name: Update /etc/hosts
                    lineinfile:  dest=/etc/hosts  line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                roles:
                 - { role: indigo-dc.consul, consul_mode: "agent", consul_bootstrap: 0}
                 - { role: indigo-dc.mesos, mesos_install_mode: "slave" }
  slave_deployment:
    type: OS::Heat::SoftwareDeployments
    depends_on:
      - slave_setup_deployment
    properties:
      config: {get_resource: slave_config}
      servers: {get_attr: [mesos_slaves, attributes, mesos_server_id]}
      input_values:
        zookeeper_peers: {get_attr: [mesos_masters, mesos_server_ip]}
        consul_servers: {get_attr: [mesos_masters, mesos_server_ip]}

  cms_wn_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: cms_config_mysquid_host
        - name: cms_config_proxycache_host
        - name: cms_config_cms_local_site
        - name: monitordb_ip
        - name: cms_config_elastic_secret
        - name: cms_config_stageoutsite
        - name: cms_config_stageoutserver
        - name: cms_config_stageoutprefix
        - name: cms_config_stageoutsite_fallback
        - name: cms_config_stageoutserver_fallback
        - name: cms_config_stageoutprefix_fallback
        - name: cms_input_path
        - name: cms_input_protocol
      config: |
              ---
              - hosts: localhost
                vars:
                connection: local
                roles:
                 - { role: indigo-dc.cms_config, cms_config_node: "wn" }
  cms_wn_deployment:
    type: OS::Heat::SoftwareDeployments
    depends_on:
      - slave_deployment
    properties:
      config: {get_resource: cms_wn_config}
      servers: {get_attr: [mesos_slaves, attributes, mesos_server_id]}
      input_values:
        cms_config_mysquid_host: {get_attr: [vip_port, fixed_ips, 0, ip_address]}
        cms_config_proxycache_host: "{{cms_config_mysquid_host}}"
        cms_config_cms_local_site: { get_param: cms_local_site }
        monitordb_ip: { get_param: monitor_ip }
        cms_config_elastic_secret: { get_param: elasticsearch_secret}
        cms_config_stageoutsite: { get_param: cms_stageoutsite }
        cms_config_stageoutserver: { get_param: cms_stageoutserver }
        cms_config_stageoutprefix: { get_param: cms_stageoutprefix }
        cms_config_stageoutsite_fallback: { get_param: cms_stageoutsite_fallback }
        cms_config_stageoutserver_fallback: { get_param: cms_stageoutserver_fallback }
        cms_config_stageoutprefix_fallback: { get_param: cms_stageoutprefix_fallback }
        cms_input_path: { get_param: cms_input_path }
        cms_input_protocol: { get_param: cms_input_protocol }


  cms_services_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:

        - name: cms_config_mysquid_host
        - name: cms_config_proxycache_host
        - name: cms_config_iamtoken
        - name: cms_config_iam_client_id
        - name: cms_config_iam_client_secret
        - name: cms_config_cms_local_site
        - name: cms_config_squid_image
        - name: cms_config_wn_image
        - name: cms_config_proxycache_image
        - name: cms_config_onedatacache
        - name: cms_config_onedatatoken
        - name: marathon_username
        - name: marathon_password
      config: |
              ---
              - hosts: localhost
                vars:
                connection: local
                roles:
                 - { role: indigo-dc.cms_config }
  cms_services_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on:
      - master_deployment
      # - cms_wn_deployment
    properties:
      config: {get_resource: cms_services_config}
      server: { "Fn::Select" : [ '0',  get_attr: [mesos_masters, attributes, mesos_server_id] ] }
      input_values:
        cms_config_mysquid_host: {get_attr: [vip_port, fixed_ips, 0, ip_address]}
        cms_config_proxycache_host: "{{cms_config_mysquid_host}}"
        cms_config_cms_local_site: { get_param: cms_local_site }
        cms_config_squid_image: {get_param: cms_squid_image}
        cms_config_wn_image: {get_param: cms_wn_image}
        cms_config_proxycache_image: {get_param: cms_proxycache_image}
        cms_config_iamtoken: { get_param: iam_token }
        cms_config_iam_client_id: { get_param: iam_client_id }
        cms_config_iam_client_secret: { get_param: iam_client_secret }
        cms_config_proxycache_image: { get_param: cms_proxycache_image  } 
        cms_config_onedatacache: { get_param: onedata_cache  } 
        cms_config_onedatatoken: { get_param: onedata_token } 
        marathon_username: { get_param: marathon_username  } 
        marathon_password: { get_param: marathon_password  } 


  mesos_slaves:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: number_of_slaves}
      resource_def:
        type: https://raw.githubusercontent.com/indigo-dc/mesos-cluster/master/deploy/openstack-heat/mesosnode.yaml
        properties:
          server_name: mesos-s%index%
          ssh_key_name: {get_param: ssh_key_name}
          server_image: {get_param: server_image}
          server_flavor: {get_param: slave_flavor}
          network: {get_param: network}
          security_groups:
               - {get_resource: secgroup_base}
               - {get_resource: secgroup_slaves}

outputs:

  mesos_master_ips:
    value: {get_attr: [mesos_masters, mesos_server_ip]}
    description: >
      This is a list of the  addresses of all the Mesos masters.
  mesos_slaves_ips:
    value: {get_attr: [mesos_slaves, mesos_server_ip]}
    description: >
      This is a list of the addresses of all the Mesos slaves
  loadbalancers_vip:
    value: {get_attr: [vip_port, fixed_ips, 0, ip_address]}
    description: >
      This is the Load Balancers Virtual IP
  
  mesos_master_id:
    value: {get_attr: [mesos_masters, mesos_server_id]}
    description: >
      This is the mesos master id
  mesos_master_id_selected:
    value: { "Fn::Select" : [ '0',  get_attr: [mesos_masters, attributes, mesos_server_id] ] }
    description: >
      This is the mesos master id selected
  cluster_endpoints:
    description: Cluster endpoints
    value:
      "Mesos":
        str_replace:
          params:
            host: { get_attr: [ mesos_masters, resource.0, mesos_server_ip ] }
          template: "http://host:5050"
      "Marathon":
        str_replace:
          params:
            host: { get_attr: [ mesos_masters, resource.0, mesos_server_ip ] }
          template: "https://host:8443"
      "Chronos":
        str_replace:
          params:
            host: { get_attr: [ mesos_masters, resource.0, mesos_server_ip ] }
          template: "https://host:4443"

 
